<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.diagnostics>
    <sharedListeners>
      <add name="coloredconsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics.ColoredConsoleTraceListener" template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">
        <!--
          Writes to the console output or error stream, using color to highlight 
          event types and allowing a customised output format.
          
          Options:
            initalizeData="false to use Console.Out|true to use Console.Error"
            traceOutputOptions="template (see below) is generally better, but supported for legacy compatibility"
            activityTracingColor="Gray|other console color"
            convertWriteToEvent="false|true"
            criticalColor="Red|other console color"
            errorColor="DarkRed|other console color"
            informationColor="Gray|other console color"
            resumeColor="console color"
            startColor="console color"
            stopColor="console color"
            suspendColor="console color"
            template="format template, default: {Source} {EventType}: {Id} : {Message}"
            transferColor="console color" 
            verboseColor="DarkCyan|other console color"
            warningColor="Yellow|other console color" 
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
      </add>
      <add name="email" type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics.EmailTraceListener" initializeData="user1@example.org,user2@example.org">
        <!--
	        Sends each trace message received in an email, using the specified subject and 
          body templates.
          
          Note: Set a filter to avoid flooding (don't rely on trace source switch value).
          
          Options (showing default or example values):
            initalizeData="user1@example.org,user2@example.org"
            bodyTemplate="Source: {Source}
Date (UTC): {DateTime:u}
Date (Local): {LocalDateTime:yyyy'-'MM'-'dd HH':'mm':'ss zzz}
Event ID: {Id}
Level: {EventType}
Activity: {ActivityId}

Application Information:
 Computer: {MachineName}
 Application Name: {ApplicationName}
 Application Domain: {AppDomain}

Process Information:
 Process ID: {ProcessId}
 Process Name: {ProcessName}
 Process: {Process}
 User: {User}

Thread Information:
 Thread ID: [{ThreadId}]
 Thread Name: {ThreadName}
 Thread Principal: {PrincipalName}

Message:
{Message}

Data:
{Data}"
              fromAddress=""
              maxConnections="2"
              maxTracesPerHour="50"
              subjectTemplate="{EventType} {Id}: {MessagePrefix}; {MachineName}; {User}; {ProcessName}"
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning"/>
      </add>
      <add name="bufferedEmail" type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics.BufferedEmailTraceListener" initializeData="user1@example.org,user2@example.org">
        <!--
          Adds formatted trace messages to a buffer and sends an email when the process 
          exits, or on request.

          Options:
            initalizeData=""
            fromAddress=""
            headerTemplate="Date (UTC): {DateTime:u}
Date (Local): {LocalDateTime:yyyy'-'MM'-'dd HH':'mm':'ss zzz}

Application Information:
 Computer: {MachineName}
 Application Name: {ApplicationName}
 Application Domain: {AppDomain}

Process Information:
 Process ID: {ProcessId}
 Process Name: {ProcessName}
 Process: {Process}
 User: {User}

Trace Events:"
            maxConnections="2"
            traceTemplate="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
            subjectTemplate="{Listener} {DateTime:u}; {MachineName}; {User}; {ProcessName}"
-->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information"/>
      </add>
      <add name="example-filelog" type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" traceOutputOptions="DateTime,ThreadId,LogicalOperationStack" autoFlush="true" customLocation="C:\Temp\Logs" location="Custom" logFileCreationSchedule="Daily" maxFileSize="5000000" reserveDiskSpace="10000000">
        <!--
          Writes to a rolling text file. You need to specify the version of the library corresponding to the .NET Framework you have installed, and make sure the customLocation exists.
        -->
      </add>
      <add name="inmemory" type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics.InMemoryTraceListener" initializeData="100">
        <!--
          Records an immutable copy of trace events in memory, within a circular buffer of the specified size.
          
          Options:
            initalizeData="size of buffer, default: 20"
            traceOutputOptions="ignored"

          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
  	    -->
      </add>
      <add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics.RollingFileTraceListener" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.log" convertWriteToEvent="true">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          
          Options:
            initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
            convertWriteToEvent="true|false" 
            template="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
      </add>
      <add name="rollingxml" type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics.RollingXmlTraceListener" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyyMMdd}.svclog">
        <!--
          Writes E2ETraceEvent XML fragments to a text file, rolling to a new 
          file based on a filename template (usually including the date).
          The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.
          
          Options:
            initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.svclog"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
      </add>
    </sharedListeners>
    <sources>
      <source name="Example.ColoredConsole.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear/>
          <add name="coloredconsole"/>
        </listeners>
      </source>
      <source name="Example.RollingFile.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear/>
          <add name="rollingfile"/>
        </listeners>
      </source>
      <source name="Example.RollingXml.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear/>
          <add name="rollingxml"/>
        </listeners>
      </source>


    </sources>
    <trace autoflush="true" indentsize="0">
      <listeners>
        <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          Note: The buffered email trace listener needs to be configured here to use the static SendAll() method.
        
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <clear/>
        <add name="coloredconsole"/>
        <add name="rollingfile"/>
      </listeners>
    </trace>
  </system.diagnostics>
  
  
  <system.net>
    <mailSettings>
      <smtp deliveryMethod="SpecifiedPickupDirectory" from="diagnostics@example.org">
        <!--
          Used by email trace listeners. For production, or if using a test SMTP server 
          such as smtp4dev, change to deliveryMethod="Network" and specify your mail host.
        -->
        <!--
          Used by email trace listeners. For production, or if using a test SMTP server 
          such as smtp4dev, change to deliveryMethod="Network" and specify your mail host.
        -->
        <network host="localhost" defaultCredentials="true"/>
        <specifiedPickupDirectory pickupDirectoryLocation="C:\Temp\MailPickup"/>
      </smtp>
    </mailSettings>
  </system.net>
  <connectionStrings>
      <!--
        For SqlDatabaseTraceListener use the tool installed in the tools directory by Nuget 
        to install the default database on the local SQL instance, using Windows credentials:
        .\diagnostics_regsql.exe -E -AD
      -->
  </connectionStrings>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2"/></startup></configuration>
